error[E0277]: the trait bound `MyInt: bitflags::traits::Primitive` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:133:22
    |
133 |     struct Flags128: MyInt {
    |                      ^^^^^ unsatisfied trait bound
    |
help: the trait `bitflags::traits::Primitive` is not implemented for `MyInt`
   --> tests/compile-fail/bitflags_custom_bits.rs:27:1
    |
 27 | struct MyInt(u8);
    | ^^^^^^^^^^^^
    = help: the following other types implement trait `bitflags::traits::Primitive`:
              i128
              i16
              i32
              i64
              i8
              isize
              u128
              u16
            and $N others
note: required by a bound in `PublicFlags::Primitive`
   --> src/traits.rs
    |
    |     type Primitive: Primitive;
    |                     ^^^^^^^^^ required by this bound in `PublicFlags::Primitive`

error[E0015]: cannot call non-const operator in constant functions
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
...   |
138 | | }
    | |_^
    |
note: impl defined here, but it is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:42:1
    |
 42 | impl BitOr for MyInt {
    | ^^^^^^^^^^^^^^^^^^^^
    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
    = note: this error originates in the macro `$crate::__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0015]: cannot call non-const operator in constant functions
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
...   |
138 | | }
    | |_^
    |
note: impl defined here, but it is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:26:23
    |
 26 | #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    |                       ^^^^^^^^^
    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const operator in constant functions
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
...   |
138 | | }
    | |_^
    |
note: impl defined here, but it is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:34:1
    |
 34 | impl BitAnd for MyInt {
    | ^^^^^^^^^^^^^^^^^^^^^
    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
    = note: this error originates in the macro `$crate::__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0015]: cannot call non-const operator in constant functions
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
...   |
138 | | }
    | |_^
    |
note: impl defined here, but it is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:26:23
    |
 26 | #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    |                       ^^^^^^^^^
    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const operator in constant functions
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
...   |
138 | | }
    | |_^
    |
note: impl defined here, but it is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:42:1
    |
 42 | impl BitOr for MyInt {
    | ^^^^^^^^^^^^^^^^^^^^
    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
    = note: this error originates in the macro `$crate::__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0015]: cannot call non-const operator in constant functions
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
...   |
138 | | }
    | |_^
    |
note: impl defined here, but it is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:26:23
    |
 26 | #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    |                       ^^^^^^^^^
    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const operator in constant functions
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
...   |
138 | | }
    | |_^
    |
note: impl defined here, but it is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:34:1
    |
 34 | impl BitAnd for MyInt {
    | ^^^^^^^^^^^^^^^^^^^^^
    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
    = note: this error originates in the macro `$crate::__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0015]: cannot call non-const operator in constant functions
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
...   |
138 | | }
    | |_^
    |
note: impl defined here, but it is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:26:23
    |
 26 | #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    |                       ^^^^^^^^^
    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const operator in constant functions
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
...   |
138 | | }
    | |_^
    |
note: impl defined here, but it is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:34:1
    |
 34 | impl BitAnd for MyInt {
    | ^^^^^^^^^^^^^^^^^^^^^
    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
    = note: this error originates in the macro `$crate::__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0015]: cannot call non-const operator in constant functions
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
...   |
138 | | }
    | |_^
    |
note: impl defined here, but it is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:26:23
    |
 26 | #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    |                       ^^^^^^^^^
    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const operator in constant functions
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
...   |
138 | | }
    | |_^
    |
note: impl defined here, but it is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:34:1
    |
 34 | impl BitAnd for MyInt {
    | ^^^^^^^^^^^^^^^^^^^^^
    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
    = note: this error originates in the macro `$crate::__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0015]: cannot call non-const operator in constant functions
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
...   |
138 | | }
    | |_^
    |
note: impl defined here, but it is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:42:1
    |
 42 | impl BitOr for MyInt {
    | ^^^^^^^^^^^^^^^^^^^^
    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
    = note: this error originates in the macro `$crate::__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0015]: cannot call non-const operator in constant functions
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
...   |
138 | | }
    | |_^
    |
note: impl defined here, but it is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:76:1
    |
 76 | impl Not for MyInt {
    | ^^^^^^^^^^^^^^^^^^
    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
    = note: this error originates in the macro `$crate::__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0015]: cannot call non-const operator in constant functions
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
...   |
138 | | }
    | |_^
    |
note: impl defined here, but it is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:34:1
    |
 34 | impl BitAnd for MyInt {
    | ^^^^^^^^^^^^^^^^^^^^^
    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
    = note: this error originates in the macro `$crate::__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0015]: cannot call non-const operator in constant functions
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
...   |
138 | | }
    | |_^
    |
note: impl defined here, but it is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:50:1
    |
 50 | impl BitXor for MyInt {
    | ^^^^^^^^^^^^^^^^^^^^^
    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
    = note: this error originates in the macro `$crate::__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0015]: cannot call non-const operator in constant functions
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
...   |
138 | | }
    | |_^
    |
note: impl defined here, but it is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:76:1
    |
 76 | impl Not for MyInt {
    | ^^^^^^^^^^^^^^^^^^
    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
    = note: this error originates in the macro `$crate::__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)
